<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>driver on crab2313's blog</title><link>crab2313.github.io/tags/driver/</link><description>Recent content in driver on crab2313's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 28 Apr 2018 00:00:00 +0000</lastBuildDate><atom:link href="crab2313.github.io/tags/driver/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux设备模型：bus与driver</title><link>crab2313.github.io/post/bus-and-driver/</link><pubDate>Sat, 28 Apr 2018 00:00:00 +0000</pubDate><guid>crab2313.github.io/post/bus-and-driver/</guid><description>bus &amp;amp; driver bus core的实现在driver/base/bus.c中，初始化过程由buses_init函数实现，函数中创建了两个kset：bus_k</description></item><item><title>Linux设备模型：kobject与uevent</title><link>crab2313.github.io/post/kobject-and-uevent/</link><pubDate>Sat, 28 Apr 2018 00:00:00 +0000</pubDate><guid>crab2313.github.io/post/kobject-and-uevent/</guid><description>kobject 1 2 3 4 5 6 7 struct kobj_type { void (*release)(struct kobject *kobj); const struct sysfs_ops *sysfs_ops; struct attribute **default_attrs; const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj); const void *(*namespace)(struct kobject *kobj); }; 1 2 3 4 5 6 7 8 struct kobj_ns_type_operations { enum kobj_ns_type type; bool (*current_may_mount)(void); void *(*grab_current_ns)(void); const void *(*netlink_ns)(struct sock *sk); const void *(*initial_ns)(void); void (*drop_ns)(void *); }; 1 2 3 4 5 6</description></item><item><title>USB Hub驱动分析</title><link>crab2313.github.io/post/usb-hub/</link><pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate><guid>crab2313.github.io/post/usb-hub/</guid><description>USB hub框架分析 USB hub框架是usbcore模块里的一个大头5000行代码（5分之一）。同时，USB hub本身在USB协议中又是一个非常重要</description></item></channel></rss>